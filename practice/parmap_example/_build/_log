### Starting build.
# Target: parallel_factor.ml.depends, tags: { package(bigarray), package(parmap), package(unix), extension:ml, file:parallel_factor.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package bigarray -package parmap -modules parallel_factor.ml > parallel_factor.ml.depends
# Target: parallel_factor.cmo, tags: { package(bigarray), package(parmap), package(unix), byte, compile, extension:cmo, extension:ml, file:parallel_factor.cmo, file:parallel_factor.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package bigarray -package parmap -o parallel_factor.cmo parallel_factor.ml
# Target: parallel_factor.cmx, tags: { package(bigarray), package(parmap), package(unix), compile, extension:cmx, extension:ml, file:parallel_factor.cmx, file:parallel_factor.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -package bigarray -package parmap -o parallel_factor.cmx parallel_factor.ml
# Target: parallel_factor.native, tags: { package(bigarray), package(parmap), package(unix), dont_link_with, extension:native, file:parallel_factor.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package unix -package bigarray -package parmap parallel_factor.cmx -o parallel_factor.native
# Compilation successful.
